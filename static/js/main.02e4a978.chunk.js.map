{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.module.css","redux/contacts/contact-actions.js","redux/contacts/contect-operations.js","redux/contacts/contact-selectors.js","redux/contacts/contact-reducer.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/store.js","index.js"],"names":["module","exports","fetchContactRequrest","createAction","fetchContactSuccess","fetchContactError","addContactRequrest","addContactSuccess","addContactError","deleteContactRequrest","deleteContactSuccess","deleteContactError","changeFilterName","axios","defaults","baseURL","contactsOperations","fetchContact","dispatch","get","then","data","catch","error","addContact","name","number","contact","post","deleteContact","id","delete","getContacts","state","contacts","items","getFilter","filter","contactsSelectors","getLoding","loading","getError","getVisibleContact","createSelector","console","log","normalizedFilter","toLowerCase","includes","createReducer","_","payload","combineReducers","ContactForm","handleChange","e","target","value","setState","handleSubmit","event","props","onSubmit","preventDefault","undefined","find","alert","resetForm","this","className","styles","Forms","Form_label","Form_input","type","placeholder","onChange","Form_button","Component","connect","ContactListItem","onDelete","List_item","List_button","onClick","length","List","map","Title","Title_input","App","isLoading","color","height","width","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,UAAY,+BAA+B,YAAc,mC,mBCA5GD,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,YAAc,8B,kBCA9DD,EAAOC,QAAU,CAAC,MAAQ,2BAA2B,WAAa,gCAAgC,WAAa,gCAAgC,UAAY,+BAA+B,YAAc,mC,iJCE3LC,EAAuBC,YAClC,iCAEWC,EAAsBD,YAAa,gCACnCE,EAAoBF,YAAa,8BAEjCG,EAAqBH,YAAa,+BAClCI,EAAoBJ,YAAa,8BACjCK,EAAkBL,YAAa,4BAG/BM,EAAwBN,YACnC,kCAEWO,EAAuBP,YAClC,iCAEWQ,EAAqBR,YAAa,+BAUlCS,EAAmBT,YAAa,mB,iBChB7CU,IAAMC,SAASC,QAAU,wBAiBzB,I,MA2CeC,EALY,CACzBC,aAvCmB,kBAAM,SAAAC,GACzBA,EAAShB,KACTW,IACGM,IAAI,aACJC,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcH,EAASd,EAAoBiB,OAChDC,OAAM,SAAAC,GAAK,OAAIL,EAASb,EAAkBkB,SAmC7CC,WAhCiB,SAACC,EAAMC,GAAP,OAAkB,SAAAR,GACnC,IAAMS,EAAU,CACdF,OACAC,UAGFR,EAASZ,KAETO,IACGe,KAAK,YAAaD,GAClBP,MAEC,gBAAGC,EAAH,EAAGA,KAAH,OAAcH,EAASX,EAAkBc,OAE1CC,OAAM,SAAAC,GAAK,OAAIL,EAASV,EAAgBe,SAmB3CM,cAhBoB,SAAAC,GAAE,OAAI,SAAAZ,GAC1BA,EAAST,KAETI,IAGGkB,OAHH,oBAGuBD,IACpBV,MAAK,WACJF,EAASR,EAAqBoB,OAE/BR,OAAM,SAAAC,GAAK,OAAIL,EAASP,EAAmBY,U,QChE1CS,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,OACtCC,EAAY,SAAAH,GAAK,OAAIA,EAAMC,SAASG,QA8C3BC,EAPW,CACxBN,cACAI,YACAG,UAzCgB,SAAAN,GAAK,OAAIA,EAAMC,SAASM,SA0CxCC,SAzCe,SAAAR,GAAK,OAAIA,EAAMC,SAASX,OA0CvCmB,kBAfwBC,YACxB,CAACX,EAAaI,IACd,SAACF,EAAUG,GACTO,QAAQC,IAAI,yKACZ,IAAMC,EAAmBT,EAAOU,cAChC,OAAOb,EAASG,QAAO,qBAAGZ,KACnBsB,cAAcC,SAASF,U,eCtB5BX,EAAQc,YAAc,IAAD,mBACxB7C,GAAsB,SAAC8C,EAAD,YAAMC,WADJ,cAExB5C,GAAoB,SAAC0B,EAAD,OAAUkB,EAAV,EAAUA,QAAV,4BAA4BlB,GAA5B,CAAmCkB,OAF/B,cAGxBzC,GAAuB,SAACuB,EAAD,OAAUkB,EAAV,EAAUA,QAAV,OACtBlB,EAAMI,QAAO,qBAAGP,KAAgBqB,QAJT,IAOrBd,EAASY,YAAc,GAAD,eACzBrC,GAAmB,SAACsC,EAAD,YAAMC,YAGtBX,EAAUS,aAAc,GAAD,mBAC1B/C,GAAuB,kBAAM,KADH,cAE1BE,GAAsB,kBAAM,KAFF,cAG1BC,GAAoB,kBAAM,KAHA,cAI1BC,GAAqB,kBAAM,KAJD,cAK1BC,GAAoB,kBAAM,KALA,cAM1BC,GAAkB,kBAAM,KANE,cAO1BC,GAAwB,kBAAM,KAPJ,cAQ1BC,GAAuB,kBAAM,KARH,cAS1BC,GAAqB,kBAAM,KATD,IAWvBY,EAAQ0B,YAAc,IAAD,mBACxB5C,GAAoB,SAAC6C,EAAD,YAAMC,WADF,cAExB3C,GAAkB,SAAC0C,EAAD,YAAMC,WAFA,cAGxBxC,GAAqB,SAACuC,EAAD,YAAMC,WAHH,IAMZC,cAAgB,CAC7BjB,QACAE,SACAG,UACAjB,U,OC3CI8B,E,4MACJpB,MAAQ,CACNR,KAAM,GACNC,OAAQ,I,EAGV4B,aAAe,SAAAC,GAAM,IAAD,EACMA,EAAEC,OAAlB/B,EADU,EACVA,KAAMgC,EADI,EACJA,MACd,EAAKC,SAAL,eACGjC,EAAOgC,K,EAGZE,aAAe,SAAAC,GAAU,IAAD,EACG,EAAK3B,MAAtBR,EADc,EACdA,KAAMC,EADQ,EACRA,OADQ,EAES,EAAKmC,MAA5B3B,EAFc,EAEdA,SAAU4B,EAFI,EAEJA,SAMlB,GAJAF,EAAMG,sBAIiBC,IAFA9B,EAAS+B,MAAK,SAAAtC,GAAO,OAAIA,EAAQF,OAASA,KAEjE,CAMA,GADAqC,EAASrC,EAAMC,IACVD,IAASC,EAGZ,OAFAwC,MAAM,wBAEC,EAET,EAAKR,SAAS,CAAEjC,KAAM,GAAIC,OAAQ,UAVhCwC,MAAM,GAAD,OAAIzC,EAAJ,iC,EAYT0C,UAAY,kBAAM,EAAKT,SAAS,EAAKzB,Q,4CAErC,WAAU,IAAD,EACkBmC,KAAKnC,MAAtBR,EADD,EACCA,KAAMC,EADP,EACOA,OACd,OACE,uBAAM2C,UAAWC,IAAOC,MAAOT,SAAUM,KAAKT,aAA9C,UACE,wBAAOU,UAAWC,IAAOE,WAAzB,iBAEE,uBACEH,UAAWC,IAAOG,WAClBC,KAAK,OACLjD,KAAK,OACLkD,YAAY,GACZlB,MAAOhC,EACPmD,SAAUR,KAAKd,kBAGnB,wBAAOe,UAAWC,IAAOE,WAAzB,mBAEE,uBACEH,UAAWC,IAAOG,WAClBC,KAAK,MACLjD,KAAK,SACLkD,YAAY,GACZlB,MAAO/B,EACPkD,SAAUR,KAAKd,kBAGnB,wBAAQe,UAAWC,IAAOO,YAAaH,KAAK,SAA5C,gC,GA7DkBI,aA6EXC,eATS,SAAA9C,GAAK,MAAK,CAChCC,SAAUI,EAAkBN,YAAYC,OAGf,SAAAf,GAAQ,MAAK,CACtC4C,SAAU,SAACrC,EAAMC,GAAP,OACRR,EAASF,EAAmBQ,WAAWC,EAAMC,QAGlCqD,CAA6C1B,G,yBC5EtD2B,EAAkB,SAAC,GAAoC,IAAlClD,EAAiC,EAAjCA,GAAIL,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,OAAQuD,EAAe,EAAfA,SAC3C,OACE,qBAAIZ,UAAWC,IAAOY,UAAtB,UACE,4BAAIzD,EAAO,KAAOC,IAClB,wBAAQ2C,UAAWC,IAAOa,YAAaC,QAAS,kBAAMH,EAASnD,IAA/D,sBAFoCA,IAqC3BiD,eARS,SAAA9C,GAAK,MAAK,CAChCC,SAAUI,EAAkBI,kBAAkBT,OAGrB,SAAAf,GAAQ,MAAK,CACtC+D,SAAU,SAAAnD,GAAE,OAAIZ,EAASF,EAAmBa,cAAcC,QAG7CiD,EA5BK,SAAC,GAA4B,IAA1B7C,EAAyB,EAAzBA,SAAU+C,EAAe,EAAfA,SAE/B,OADArC,QAAQC,IAAI,YAAaX,GACD,IAApBA,EAASmD,OAAqB,KAEhC,oBAAIhB,UAAWC,IAAOgB,KAAtB,SACGpD,EAASqD,KAAI,SAAA5D,GAAO,OACnB,cAAC,EAAD,2BAAsCA,GAAtC,IAA+CsD,SAAUA,IAAnCtD,EAAQG,Y,iBCSvBiD,eAZS,SAAA9C,GAAK,MAAK,CAChCI,OAAQC,EAAkBF,UAAUH,OAGX,SAAAf,GAAQ,MAAK,CACtC0D,SAAU,SAAArB,GAAC,OAAIrC,EAASN,EAAiB2C,EAAEC,OAAOC,YAOrCsB,EA3BA,SAAC,GAA0B,IAAxB1C,EAAuB,EAAvBA,OAAQuC,EAAe,EAAfA,SACxB,OACE,wBAAOP,UAAWC,IAAOkB,MAAzB,kCAEE,uBACEnB,UAAWC,IAAOmB,YAClBf,KAAK,OACLjD,KAAK,SACLgC,MAAOpB,EACPuC,SAAUA,U,oBCJZc,I,6KACJ,WACEtB,KAAKP,MAAM5C,iB,oBAGb,WACE,OACE,qCACE,2CAEA,cAAC,EAAD,IAEA,0CAEA,cAAC,EAAD,IAEA,cAAC,EAAD,IACCmD,KAAKP,MAAM8B,WACV,cAAC,KAAD,CACEjB,KAAK,YACLkB,MAAM,UACNC,OAAQ,GACRC,MAAO,GACPzB,UAAU,WAGbD,KAAKP,MAAMtC,OAAS,yD,GA1BXuD,cAyCHC,gBATS,SAAA9C,GAAK,MAAK,CAChC0D,UAAWrD,EAAkBC,UAAUN,GACvCV,MAAOe,EAAkBG,SAASR,OAGT,SAAAf,GAAQ,MAAK,CACtCD,aAAc,kBAAMC,EAASF,EAAmBC,oBAGnC8D,CAA6CW,I,oCCtCtDK,GAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,KAAOC,KAAWC,KAAOC,KAASC,KAAOC,UAHhD,CAMdC,OAUaC,GAPDC,YAAe,CAC3BC,QAAS,CACP1E,SAAU2E,GAEZd,cACAe,UAAUC,ICrBZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUR,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJS,SAASC,eAAe,W","file":"static/js/main.02e4a978.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"ContactList_List__22-hk\",\"List_item\":\"ContactList_List_item__3y93y\",\"List_button\":\"ContactList_List_button__1yxqy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Title\":\"Filter_Title__27Cs_\",\"Title_input\":\"Filter_Title_input__BRC4D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Forms\":\"ContactForm_Forms__1h3IJ\",\"Form_label\":\"ContactForm_Form_label__7JKHJ\",\"Form_input\":\"ContactForm_Form_input__3UXOq\",\"Forminput\":\"ContactForm_Forminput__1TLYs\",\"Form_button\":\"ContactForm_Form_button__av8Hb\"};","//import { v4 as uuid } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequrest = createAction(\r\n  'contacts/fetchContactRequrest',\r\n);\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequrest = createAction('contacts/addContactRequrest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\n//export const deleteContact = createAction('contacts/delete');\r\nexport const deleteContactRequrest = createAction(\r\n  'contacts/deleteContactRequrest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\n/*const addContact = createAction('contacts/add', (name, number) => ({\r\n  payload: {\r\n    name,\r\n    number,\r\n    id: uuid(),\r\n  },\r\n}));*/\r\n\r\nexport const changeFilterName = createAction('contacts/filter');\r\n\r\n/*\r\nconst contactActions = {\r\n  fetchContactRequrest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequrest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequrest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilterName,\r\n};\r\n\r\n\r\nexport default contactActions;*/\r\n","import axios from 'axios';\r\n//import actions from './contact-actions';\r\nimport {\r\n  addContactRequrest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequrest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequrest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from './contact-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\n/*const asyncActionCreator = args => dispatch => {\r\n  // можно диспачить http запросы\r\n};*/\r\n\r\n/*const fetchContact = () => async dispatch => {\r\n  dispatch(fetchContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/todos');\r\n\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error));\r\n  }*/\r\n\r\nconst fetchContact = () => dispatch => {\r\n  dispatch(fetchContactRequrest());\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n    .catch(error => dispatch(fetchContactError(error)));\r\n};\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n  //dispatch({ type: 'contacts/addContactRequrest' });\r\n  dispatch(addContactRequrest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(\r\n      //dispatch({ type: 'contacts/addContactSuccess', paload: data }),\r\n      ({ data }) => dispatch(addContactSuccess(data)),\r\n    )\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequrest());\r\n\r\n  axios\r\n    /*.delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))*/\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => {\r\n      dispatch(deleteContactSuccess(id));\r\n    })\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\nconst contactsOperations = {\r\n  fetchContact,\r\n  addContact,\r\n  deleteContact,\r\n};\r\nexport default contactsOperations;\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getContacts = state => state.contacts.items;\r\nconst getFilter = state => state.contacts.filter;\r\nconst getLoding = state => state.contacts.loading;\r\nconst getError = state => state.contacts.error;\r\n\r\n/*const getVisibleContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normolizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(normolizedFilter),\r\n  );\r\n};*/\r\n//МЕМОИЗАЦИЯ\r\n/*const getNormolizedFilter = state => {\r\n  const filter = getFilter(state);\r\n\r\n  return filter.toLowerCase(state);\r\n};\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getNormolizedFilter],\r\n  (contacts, normolizedFilter) => {\r\n    debugger;\r\n    contacts.filter(contacts =>\r\n      contacts.name.toLowerCase().includes(normolizedFilter),\r\n    );\r\n  },\r\n);*/\r\n\r\nconst getVisibleContact = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    console.log('новый массив видимых контактов');\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\nconst contactsSelectors = {\r\n  getContacts,\r\n  getFilter,\r\n  getLoding,\r\n  getError,\r\n  getVisibleContact,\r\n};\r\nexport default contactsSelectors;\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n//import { contactActions } from './contact-actions';\r\nimport {\r\n  addContactRequrest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequrest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequrest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  changeFilterName,\r\n} from './contact-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilterName]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactRequrest]: () => true,\r\n  [fetchContactSuccess]: () => false,\r\n  [fetchContactError]: () => false,\r\n  [addContactRequrest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequrest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\nconst error = createReducer('', {\r\n  [fetchContactError]: (_, { payload }) => payload,\r\n  [addContactError]: (_, { payload }) => payload,\r\n  [deleteContactError]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n","import React, { Component } from 'react';\r\nimport styles from './ContactForm.module.css';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n  handleSubmit = event => {\r\n    const { name, number } = this.state;\r\n    const { contacts, onSubmit } = this.props;\r\n\r\n    event.preventDefault();\r\n\r\n    const isExistContact = contacts.find(contact => contact.name === name);\r\n\r\n    if (isExistContact !== undefined) {\r\n      alert(`${name}is already in the Phonebook`);\r\n      return;\r\n    }\r\n\r\n    onSubmit(name, number);\r\n    if (!name || !number) {\r\n      alert(`Some field is empty`);\r\n\r\n      return false;\r\n    }\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n  resetForm = () => this.setState(this.state);\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form className={styles.Forms} onSubmit={this.handleSubmit}>\r\n        <label className={styles.Form_label}>\r\n          Name\r\n          <input\r\n            className={styles.Form_input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"\"\r\n            value={name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <label className={styles.Form_label}>\r\n          Number\r\n          <input\r\n            className={styles.Form_input}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            placeholder=\"\"\r\n            value={number}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <button className={styles.Form_button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (name, number) =>\r\n    dispatch(contactsOperations.addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import { connect } from 'react-redux';\r\nimport styles from './ContactList.module.css';\r\n//import contactsOperations from '../../redux/contacts/contect-operations';\r\n//import contactsSelectors from '../../redux/contacts/contacts-selectors';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\n\r\nconst ContactListItem = ({ id, name, number, onDelete }) => {\r\n  return (\r\n    <li className={styles.List_item} key={id}>\r\n      <p>{name + ': ' + number}</p>\r\n      <button className={styles.List_button} onClick={() => onDelete(id)}>\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst ContactList = ({ contacts, onDelete }) => {\r\n  console.log(' contacts', contacts);\r\n  if (contacts.length === 0) return null;\r\n  return (\r\n    <ul className={styles.List}>\r\n      {contacts.map(contact => (\r\n        <ContactListItem key={contact.id} {...contact} onDelete={onDelete} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n/*const getVisibleContacts = (contacts, filter) => {\r\n  return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n};\r\n/*const mapStateToProps = ({ contacts: { contacts, filter } }) => ({\r\n  contacts: getVisibleContacts(contacts, filter),\r\n});\r\n*/\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getVisibleContact(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDelete: id => dispatch(contactsOperations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\nimport { contactsSelectors, changeFilterName } from '../../redux/contacts';\r\n\r\nconst Filter = ({ filter, onChange }) => {\r\n  return (\r\n    <label className={styles.Title}>\r\n      Find contacts by name\r\n      <input\r\n        className={styles.Title_input}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filter: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(changeFilterName(e.target.value)),\r\n});\r\n\r\nFilter.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  filter: PropTypes.string,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport ContactForm from './components/ContactForm';\r\nimport ContactList from './components/ContactList/';\r\nimport Filter from './components/Filter';\r\nimport Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\nimport { contactsSelectors, contactsOperations } from './redux/contacts';\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContact();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1>Phonebook</h1>\r\n\r\n        <ContactForm />\r\n\r\n        <h2>Contacts</h2>\r\n\r\n        <Filter />\r\n\r\n        <ContactList />\r\n        {this.props.isLoading && (\r\n          <Loader\r\n            type=\"ThreeDots\"\r\n            color=\"#303f9f\"\r\n            height={80}\r\n            width={80}\r\n            className=\"Loader\"\r\n          />\r\n        )}\r\n        {this.props.error && <h1>No result found!</h1>}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoading: contactsSelectors.getLoding(state),\r\n  error: contactsSelectors.getError(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContact: () => dispatch(contactsOperations.fetchContact()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport { contactReducer } from './contacts';\r\n\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\nexport default store;\r\n/*const middleware = getDefaultMiddleware =>\r\n  getDefaultMiddleware().concat(logger);\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n  },\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware,\r\n});*/\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport store from './redux/store';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}